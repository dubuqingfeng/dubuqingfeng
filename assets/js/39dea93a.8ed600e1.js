"use strict";(self.webpackChunkdubuqingfeng=self.webpackChunkdubuqingfeng||[]).push([[1724],{77862:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"code/dir/mddir","title":"mddir","description":"","source":"@site/docs/code/dir/mddir.md","sourceDirName":"code/dir","slug":"/code/dir/mddir","permalink":"/docs/code/dir/mddir","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rpc","permalink":"/docs/code/blockchain/rpc"},"next":{"title":"byte2str","permalink":"/docs/code/python/byte2str"}}');var o=r(74848),a=r(28453);const i={},l=void 0,s={},d=[];function f(n){const e={code:"code",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"#!/usr/bin/env node\n// base https://github.com/JohnByrneRepo/mddir/blob/master/src/mddir.js\n\nvar fs = require('fs'),\n    path = require('path');\n\nvar folders = {};\nvar outputText = '';\nvar markdownText = '';\nvar depth = 0;\nvar exported = false;\nvar outputFileName = 'directoryList.md';\nvar searchPath = path.resolve(process.argv[2] || '.');\nvar key = searchPath;//.replace(/\\//g,'');\nvar startFolder = searchPath.split('/')[searchPath.split('/').length - 2];\nvar startDepth = searchPath.split('/').length - 1;\nvar currentWorkingDirectory = process.cwd();\n\nvar folderIgnoreList = [\n    '.git',\n    'node_modules',\n    '_media'\n];\n\n// getFolders \u83b7\u53d6\u6587\u4ef6 / \u6587\u4ef6\u5939\u5217\u8868\nvar getFolders = function(path){\n  fs.readdir(path, function(err, list){\n    if (err) return done(err);\n    list.forEach(function(item){\n      if(fs.lstatSync(path + '/' + item).isDirectory() &&\n        folderIgnoreList.indexOf(item) === -1){\n        var folderDepth = path.split('/').length;\n        if(folderDepth > depth){\n          depth = folderDepth;\n        }\n        var uniqueKey = path + '/' + item.replace(/\\//g,'');\n        folders[uniqueKey] = {\n          depth: folderDepth,\n          parentFolder: path,\n          path: path + '/' + item,\n          name: item,\n          folders: [],\n          files: [],\n          logged: false,\n          parsed: false,\n          marked: false\n        };\n        getFolders(path + '/' + item, true);\n      }\n    });\n    getFilesInFolders();\n  });\n};\n\n// getFiles \u83b7\u53d6\u6587\u4ef6\nvar getFiles = function(path, key){\n  fs.readdir(path, function(err, list){\n    list.forEach(function(item){\n      if(!fs.lstatSync(path + '/' + item).isDirectory()){\n        if(folders[key].files.length === 0 || folders[key].files.indexOf(item) === -1){\n          folders[key].files.push(item);\n        }\n      } else {\n        if(folders[key].folders.indexOf(item) === -1){\n          folders[key].folders.push(item);\n        }\n      }\n    });\n    folders[key].parsed = true;\n    listFolders();\n  });\n};\n\nvar getFilesInFolders = function(){\n  for (var key in folders) {\n    if (folders.hasOwnProperty(key)) {\n      getFiles(folders[key].path, key);\n    }\n  }\n};\n\nvar listFolders = function(){\n  var allParsed = true;\n  var numFolders = 0;\n  for(var key in folders){\n    if(folders.hasOwnProperty(key)){\n      numFolders++;\n      if(!folders[key].logged || !folders[key].parsed){\n        allParsed = false;\n      }\n      if(folders[key].parsed && !folders[key].logged){\n        folders[key].logged = true;\n        // console.log(JSON.stringify(folders[key],null,2));\n      }\n    }\n  }\n  if(allParsed && !exported){\n    exported = true;\n    // console.log('Number of folders: ' + numFolders);\n    // generateText();\n    generateMarkdown();\n    console.log(JSON.stringify(folders,null,2));\n  }\n};\n\n// generateText not used\nvar generateText = function(){\n    outputText += 'Files and folders in ' + searchPath + '\\n\\n';\n    for(var i = 0; i < depth + 1; i++){\n      for(var key in folders) {\n        if(folders.hasOwnProperty(key)){\n          var folder = folders[key];\n          if(folder.depth === i){\n            var name = folder.path.split(searchPath)[1];\n            outputText += name + '\\n';\n            for(var j = 0; j < name.length; j++){\n              outputText += '-';\n            }\n            outputText += '\\n';\n            if(folder.files.length === 0){\n              outputText += 'No files in folder' + '\\n';\n            }\n            for(var j = 0; j < folder.files.length; j++){\n              outputText += folder.files[j] + '\\n';\n            }\n            outputText += '\\n\\n';\n          }\n        }\n      }\n    }\n    fs.writeFile(outputFileName, outputText, function(err){\n      if (err) return;\n      // console.log(outputFileName +  '>' + outputText);\n    });\n  };\n  \nvar addFileName = function(dirname, name, indent){\n    var indent = indent + 4;\n    markdownText += '';\n    for(var i = 0; i < indent; i++){\n        // if(i % 3 === 0){\n        // markdownText += '|';\n        // } else {\n        markdownText += ' ';\n        // }\n    }\n    // before\n    // markdownText += '|-- ' + name + '\\n';\n    dirname = dirname.replace('/workspaces/dubuqingfeng', '.');\n    dirname = dirname.replace('./docs', '');\n    name = name.replace('.md', '');\n    markdownText += '+ [' + name + '](' + dirname + '/' + name  + ')' + '\\n';\n};\n\nvar addFolderName = function(name, index){\nif(folders[name] !== undefined){\n    if(folders[name].marked){\n    return;\n    }\n    var indent = (folders[name].depth - startDepth) * 4;\n    markdownText += '';\n    for(var i = 0; i < indent; i++){\n        markdownText += ' ';\n        // if(folders[name].folders.length > 0){\n        //   if(i % 3 === 0){\n        //     markdownText += '|';\n        //   } else {\n        //     markdownText += ' ';\n        //   }\n        // } else {\n        //   markdownText += ' ';\n        // }\n    }\n    if(index === 1){\n        console.log('adding root folder');\n        // before\n        // markdownText += '|-- ' + startFolder + '\\n';\n        markdownText += '+ ' + startFolder + '\\n';\n    } else {\n        // before\n        // markdownText += '|-- ' + folders[name].name + '\\n';\n        markdownText += '+ ' + folders[name].name + '\\n';\n    }\n    // console.log('Folders[name]:');\n    // console.log(folders[name]);\n    folders[name].files.forEach(function(f){\n        addFileName(name, f, indent);\n    });\n    folders[name].marked = true;\n    folders[name].folders.forEach(function(f){\n        var path = name + '/' + f;\n        addFolderName(path, 2);\n    });    \n}\n};\n\nvar generateMarkdown = function(){\n    addFolderName(key, 1);\n\n    addSiblingfolderConnections();\n\n    fs.writeFile(currentWorkingDirectory + '/' + outputFileName, markdownText, function(err){\n        if (err) return;\n        // console.log(outputFileName +  '>' + outputText);\n    });\n};\n\nString.prototype.replaceAt=function(index, character) {\n    return this.substring(0, index) + character + this.substring(index+character.length);\n}\n\nvar addSiblingfolderConnections = function(){ \n    var lines = markdownText.split('\\n');\n    for(var i=1; i<lines.length; i++){\n        var line1 = lines[i-1];\n        var line2 = lines[i];\n        for(var j=0; j<line2.length; j++){\n        var char1 = line1.charAt(j);\n        var char2 = line2.charAt(j);\n        // console.log('comparing ' + char1 + ' with ' + char2);\n        // Search for folder below to connect to\n        var foundSibling = false;\n        for(var k=i; k<lines.length; k++){\n            var charBelow = lines[k].charAt(j);\n            if(charBelow !== '|' && charBelow !== ' '){\n            break;\n            }\n            if(charBelow === '|'){\n            foundSibling = true;\n            }\n        }\n        if(foundSibling && char1 === '|' && char2 === ' '){\n            line2 = line2.replaceAt(j, '|');\n            lines[i] = line2;\n        }\n        }\n    }\n    console.log('lines');\n    console.log(lines);\n    markdownText = lines.join('\\n');\n};\n\n\n// start the mddir\nfolders[key] = {\n    depth: searchPath.split('/').length - 1,\n    parentFolder: null,\n    path: searchPath,\n    name: searchPath.split('/')[searchPath.split('/').length - 1],\n    folders: [],\n    files: [],\n    logged: false,\n    parsed: false,\n    marked: false\n};\nfs.readdir(searchPath, function(err, list){\n    list.forEach(function(item){\n        if(!fs.lstatSync(searchPath + '/' + item).isDirectory()){\n            if(folders[key].files.indexOf(item) === -1){\n                folders[key].files.push(item);\n            }\n        }\n    });\n    folders[key].parsed = true;\n});\ngetFolders(searchPath); \n"})})}function c(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(f,{...n})}):f(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>l});var t=r(96540);const o={},a=t.createContext(o);function i(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);