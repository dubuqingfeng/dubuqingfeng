"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5490],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(t),g=a,d=m["".concat(p,".").concat(g)]||m[g]||s[g]||o;return t?r.createElement(d,i(i({ref:n},l),{},{components:t})):r.createElement(d,i({ref:n},l))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={},i=void 0,c={unversionedId:"Wiki/programming/golang/concurrency/waitgroup",id:"Wiki/programming/golang/concurrency/waitgroup",title:"waitgroup",description:"Sync.WaitGroup",source:"@site/docs/Wiki/programming/golang/concurrency/waitgroup.md",sourceDirName:"Wiki/programming/golang/concurrency",slug:"/Wiki/programming/golang/concurrency/waitgroup",permalink:"/docs/Wiki/programming/golang/concurrency/waitgroup",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Wiki/programming/golang/concurrency/waitgroup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"once",permalink:"/docs/Wiki/programming/golang/concurrency/once"},next:{title:"context",permalink:"/docs/Wiki/programming/golang/context/"}},p={},u=[{value:"Sync.WaitGroup",id:"syncwaitgroup",level:3},{value:"ToC",id:"toc",level:4},{value:"Example",id:"example",level:4},{value:"\u6838\u5fc3\u5185\u5bb9",id:"\u6838\u5fc3\u5185\u5bb9",level:4},{value:"ErrorGroup \u6269\u5c55",id:"errorgroup-\u6269\u5c55",level:4},{value:"\u53c2\u8003\u94fe\u63a5",id:"\u53c2\u8003\u94fe\u63a5",level:4}],l={toc:u};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"syncwaitgroup"},"Sync.WaitGroup"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/golang/go/blob/master/src/sync/waitgroup.go"},"https://github.com/golang/go/blob/master/src/sync/waitgroup.go")),(0,a.kt)("h4",{id:"toc"},"ToC"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example"),(0,a.kt)("li",{parentName:"ul"})),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package main\n\nimport (\n    "fmt"\n    "sync"\n)\nvar wg sync.WaitGroup\nfunc handle(num int) {\n    defer wg.Done()\n    fmt.Println(num, "handle.")\n}\nfunc main() {\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        go handle(i)\n    }\n    fmt.Println("main goroutine do something.")\n    wg.Wait()\n    fmt.Println("main goroutine end.")\n}\n')),(0,a.kt)("h4",{id:"\u6838\u5fc3\u5185\u5bb9"},"\u6838\u5fc3\u5185\u5bb9"),(0,a.kt)("p",null,"\u4fe1\u53f7\u91cf\u8ba1\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"type WaitGroup struct {\n    noCopy noCopy\n    // 64 \u4f4d\u548c 32 \u4f4d\u4f7f\u7528\u7684\u4e0d\u540c\n    state1 uint64\n    state2 uint32\n}\n")),(0,a.kt)("p",null,"Add \u65b9\u6cd5\u7684\u5b9e\u73b0\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'func (wg *WaitGroup) Add(delta int) {\n    statep, semap := wg.state()\n    state := atomic.AddUint64(statep, uint64(delta)<<32)\n    v := int32(state >> 32)\n    w := uint32(state)\n    if v < 0 {\n        panic("sync: negative WaitGroup counter")\n    }\n    if w != 0 && delta > 0 && v == int32(delta) {\n        panic("sync: WaitGroup misuse: Add called concurrently with Wait")\n    }\n    if v > 0 || w == 0 {\n        return\n    }\n    // This goroutine has set counter to 0 when waiters > 0.\n    // Now there can\'t be concurrent mutations of state:\n    // - Adds must not happen concurrently with Wait,\n    // - Wait does not increment waiters if it sees counter == 0.\n    // Still do a cheap sanity check to detect WaitGroup misuse.\n    if *statep != state {\n        panic("sync: WaitGroup misuse: Add called concurrently with Wait")\n    }\n    // Reset waiters count to 0.\n    *statep = 0\n    for ; w != 0; w-- {\n        runtime_Semrelease(semap, false, 0)\n    }\n}\n')),(0,a.kt)("p",null,"Done \u7684\u65b9\u6cd5\u662f Add(-1)"),(0,a.kt)("p",null,"Wait \u65b9\u6cd5\u5b9e\u73b0\uff1a"),(0,a.kt)("p",null,"for \u5faa\u73af\u4e0d\u65ad\u68c0\u67e5 state\uff0c\u5982\u679c\u8ba1\u6570\u5668\u4e3a 0\uff0c\u5219\u6240\u6709 goroutine \u5168\u90e8\u6267\u884c\u5b8c\u6bd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// Wait blocks until the WaitGroup counter is zero.\nfunc (wg *WaitGroup) Wait() {\n    statep, semap := wg.state()\n    for {\n        state := atomic.LoadUint64(statep)\n        v := int32(state >> 32)\n        w := uint32(state)\n        if v == 0 {\n            return\n        }\n        // Increment waiters count.\n        if atomic.CompareAndSwapUint64(statep, state, state+1) {\n            runtime_Semacquire(semap)\n            if *statep != 0 {\n                panic("sync: WaitGroup is reused before previous Wait has returned")\n            }\n            return\n        }\n    }\n}\n')),(0,a.kt)("h4",{id:"errorgroup-\u6269\u5c55"},"ErrorGroup \u6269\u5c55"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Go"),"\u6269\u5c55\u5e93\u901a\u8fc7 ",(0,a.kt)("inlineCode",{parentName:"p"},"errorgroup.Group "),"\u63d0\u4f9b ",(0,a.kt)("inlineCode",{parentName:"p"},"ErrorGroup")," \u539f\u8bed\u7684\u529f\u80fd"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func WithContext(ctx context.Context) (*Group, context.Context)\nfunc (g *Group) Go(f func() error)\nfunc (g *Group) Wait() error\n")),(0,a.kt)("p",null,"\u4f1a\u8fd4\u56de\u6240\u6709\u6267\u884c\u4efb\u52a1\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"goroutine"),"\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u3002"),(0,a.kt)("p",null,"\u5e95\u5c42\u539f\u7406\u7684\u8bdd\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"type Group struct {\n    cancel func()\n\n    wg sync.WaitGroup\n\n    errOnce sync.Once\n    err     error\n}\n")),(0,a.kt)("p",null,"\u901a\u8fc7 sync.Once \u4fdd\u8bc1\u8fd4\u56de\u6240\u6709\u6267\u884c\u4efb\u52a1\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u3002"),(0,a.kt)("h4",{id:"\u53c2\u8003\u94fe\u63a5"},"\u53c2\u8003\u94fe\u63a5"),(0,a.kt)("p",null,"\u6df1\u5ea6\u89e3\u6790sync WaitGroup\u6e90\u7801"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/352329481"},"https://zhuanlan.zhihu.com/p/352329481")))}s.isMDXComponent=!0}}]);