"use strict";(self.webpackChunkdubuqingfeng=self.webpackChunkdubuqingfeng||[]).push([[333],{71090:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Wiki/programming/cpp/concurrency/condition-variable","title":"condition-variable","description":"\u6761\u4ef6\u53d8\u91cf std::condition_variable","source":"@site/docs/Wiki/programming/cpp/concurrency/condition-variable.md","sourceDirName":"Wiki/programming/cpp/concurrency","slug":"/Wiki/programming/cpp/concurrency/condition-variable","permalink":"/docs/Wiki/programming/cpp/concurrency/condition-variable","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"atomic","permalink":"/docs/Wiki/programming/cpp/concurrency/atomic"},"next":{"title":"future-promise-async","permalink":"/docs/Wiki/programming/cpp/concurrency/future-promise-async"}}');var o=i(74848),r=i(28453);const c={},s=void 0,d={},a=[{value:"\u6761\u4ef6\u53d8\u91cf std::condition_variable",id:"\u6761\u4ef6\u53d8\u91cf-stdcondition_variable",level:3}];function u(n){const e={code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h3,{id:"\u6761\u4ef6\u53d8\u91cf-stdcondition_variable",children:"\u6761\u4ef6\u53d8\u91cf std::condition_variable"}),"\n",(0,o.jsxs)(e.p,{children:["\u7528\u4e8e\u7ebf\u7a0b\u95f4\u7b49\u5f85/\u901a\u77e5\uff0c\u914d\u5408 ",(0,o.jsx)(e.code,{children:"std::unique_lock<std::mutex>"})," \u548c\u8c13\u8bcd\u4f7f\u7528\uff0c\u907f\u514d\u865a\u5047\u5524\u9192\u3002"]}),"\n",(0,o.jsx)(e.p,{children:"\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u793a\u4f8b\uff1a"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:"#include <condition_variable>\n#include <mutex>\n#include <queue>\n#include <thread>\n\nstd::mutex mtx;\nstd::condition_variable cv;\nstd::queue<int> q;\nbool done = false;\n\nvoid producer() {\n  for (int i = 0; i < 10; ++i) {\n    {\n      std::lock_guard<std::mutex> lk(mtx);\n      q.push(i);\n    }\n    cv.notify_one();\n  }\n  {\n    std::lock_guard<std::mutex> lk(mtx);\n    done = true;\n  }\n  cv.notify_all();\n}\n\nvoid consumer() {\n  for (;;) {\n    std::unique_lock<std::mutex> lk(mtx);\n    cv.wait(lk, [] { return !q.empty() || done; });\n    if (!q.empty()) {\n      int v = q.front(); q.pop();\n      lk.unlock();\n      // consume v\n    } else if (done) {\n      break;\n    }\n  }\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["\u8981\u70b9\uff1a\u59cb\u7ec8\u4f7f\u7528\u5e26\u8c13\u8bcd\u7684 ",(0,o.jsx)(e.code,{children:"wait"}),"\uff0c\u5e76\u5728\u6301\u9501\u72b6\u6001\u4e0b\u68c0\u67e5\u5171\u4eab\u72b6\u6001\u3002"]})]})}function l(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>c,x:()=>s});var t=i(96540);const o={},r=t.createContext(o);function c(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);