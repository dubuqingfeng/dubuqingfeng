"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8310],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(r),f=a,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,c(c({ref:t},l),{},{components:r})):n.createElement(m,c({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var p=2;p<o;p++)c[p]=r[p];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},78429:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={},c=void 0,i={unversionedId:"code/python/trace/trace",id:"code/python/trace/trace",title:"trace",description:"",source:"@site/docs/code/python/trace/trace.md",sourceDirName:"code/python/trace",slug:"/code/python/trace/",permalink:"/docs/code/python/trace/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"byte2str",permalink:"/docs/code/python/byte2str"},next:{title:"alfred",permalink:"/docs/life/devices/alfred"}},s={},p=[],l={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#!/usr/bin/env python\n# coding=utf-8\n#!/usr/bin/env python3\n\nimport logging\n\nimport uptrace\nfrom opentelemetry import trace\n\n# Configure OpenTelemetry with sensible defaults.\nuptrace.configure_opentelemetry(\n    # Set dsn or UPTRACE_DSN env var.\n    dsn="",\n    service_name="myservice",\n    service_version="1.0.0",\n)\n\n# Create a tracer. Usually, tracer is a global variable.\ntracer = trace.get_tracer("app_or_package_name", "1.0.0")\n\n# Create a root span (a trace) to measure some operation.\nwith tracer.start_as_current_span("main-operation") as main:\n    with tracer.start_as_current_span("GET /posts/:id") as child1:\n        child1.set_attribute("http.method", "GET")\n        child1.set_attribute("http.route", "/posts/:id")\n        child1.set_attribute("http.url", "http://localhost:8080/posts/123")\n        child1.set_attribute("http.status_code", 200)\n        child1.record_exception(ValueError("error1"))\n\n    with tracer.start_as_current_span("SELECT") as child2:\n        child2.set_attribute("db.system", "mysql")\n        child2.set_attribute("db.statement", "SELECT * FROM posts LIMIT 100")\n\n    logging.error("Jackdaws love my big sphinx of quartz.")\n\n    print("trace:", uptrace.trace_url(main))\n\n# Send buffered spans and free resources.\nuptrace.shutdown()\n\n')))}u.isMDXComponent=!0}}]);