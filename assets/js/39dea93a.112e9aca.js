"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1362],{3905:(e,n,r)=>{r.d(n,{Zo:()=>f,kt:()=>u});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},f=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),p=d(r),u=o,m=p["".concat(s,".").concat(u)]||p[u]||c[u]||a;return r?t.createElement(m,i(i({ref:n},f),{},{components:r})):t.createElement(m,i({ref:n},f))}));function u(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},88724:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var t=r(87462),o=(r(67294),r(3905));const a={},i=void 0,l={unversionedId:"code/dir/mddir",id:"code/dir/mddir",title:"mddir",description:"",source:"@site/docs/code/dir/mddir.md",sourceDirName:"code/dir",slug:"/code/dir/mddir",permalink:"/docs/code/dir/mddir",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"rpc",permalink:"/docs/code/blockchain/rpc"},next:{title:"byte2str",permalink:"/docs/code/python/byte2str"}},s={},d=[],f={toc:d};function c(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},f,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"#!/usr/bin/env node\n// base https://github.com/JohnByrneRepo/mddir/blob/master/src/mddir.js\n\nvar fs = require('fs'),\n    path = require('path');\n\nvar folders = {};\nvar outputText = '';\nvar markdownText = '';\nvar depth = 0;\nvar exported = false;\nvar outputFileName = 'directoryList.md';\nvar searchPath = path.resolve(process.argv[2] || '.');\nvar key = searchPath;//.replace(/\\//g,'');\nvar startFolder = searchPath.split('/')[searchPath.split('/').length - 2];\nvar startDepth = searchPath.split('/').length - 1;\nvar currentWorkingDirectory = process.cwd();\n\nvar folderIgnoreList = [\n    '.git',\n    'node_modules',\n    '_media'\n];\n\n// getFolders \u83b7\u53d6\u6587\u4ef6 / \u6587\u4ef6\u5939\u5217\u8868\nvar getFolders = function(path){\n  fs.readdir(path, function(err, list){\n    if (err) return done(err);\n    list.forEach(function(item){\n      if(fs.lstatSync(path + '/' + item).isDirectory() &&\n        folderIgnoreList.indexOf(item) === -1){\n        var folderDepth = path.split('/').length;\n        if(folderDepth > depth){\n          depth = folderDepth;\n        }\n        var uniqueKey = path + '/' + item.replace(/\\//g,'');\n        folders[uniqueKey] = {\n          depth: folderDepth,\n          parentFolder: path,\n          path: path + '/' + item,\n          name: item,\n          folders: [],\n          files: [],\n          logged: false,\n          parsed: false,\n          marked: false\n        };\n        getFolders(path + '/' + item, true);\n      }\n    });\n    getFilesInFolders();\n  });\n};\n\n// getFiles \u83b7\u53d6\u6587\u4ef6\nvar getFiles = function(path, key){\n  fs.readdir(path, function(err, list){\n    list.forEach(function(item){\n      if(!fs.lstatSync(path + '/' + item).isDirectory()){\n        if(folders[key].files.length === 0 || folders[key].files.indexOf(item) === -1){\n          folders[key].files.push(item);\n        }\n      } else {\n        if(folders[key].folders.indexOf(item) === -1){\n          folders[key].folders.push(item);\n        }\n      }\n    });\n    folders[key].parsed = true;\n    listFolders();\n  });\n};\n\nvar getFilesInFolders = function(){\n  for (var key in folders) {\n    if (folders.hasOwnProperty(key)) {\n      getFiles(folders[key].path, key);\n    }\n  }\n};\n\nvar listFolders = function(){\n  var allParsed = true;\n  var numFolders = 0;\n  for(var key in folders){\n    if(folders.hasOwnProperty(key)){\n      numFolders++;\n      if(!folders[key].logged || !folders[key].parsed){\n        allParsed = false;\n      }\n      if(folders[key].parsed && !folders[key].logged){\n        folders[key].logged = true;\n        // console.log(JSON.stringify(folders[key],null,2));\n      }\n    }\n  }\n  if(allParsed && !exported){\n    exported = true;\n    // console.log('Number of folders: ' + numFolders);\n    // generateText();\n    generateMarkdown();\n    console.log(JSON.stringify(folders,null,2));\n  }\n};\n\n// generateText not used\nvar generateText = function(){\n    outputText += 'Files and folders in ' + searchPath + '\\n\\n';\n    for(var i = 0; i < depth + 1; i++){\n      for(var key in folders) {\n        if(folders.hasOwnProperty(key)){\n          var folder = folders[key];\n          if(folder.depth === i){\n            var name = folder.path.split(searchPath)[1];\n            outputText += name + '\\n';\n            for(var j = 0; j < name.length; j++){\n              outputText += '-';\n            }\n            outputText += '\\n';\n            if(folder.files.length === 0){\n              outputText += 'No files in folder' + '\\n';\n            }\n            for(var j = 0; j < folder.files.length; j++){\n              outputText += folder.files[j] + '\\n';\n            }\n            outputText += '\\n\\n';\n          }\n        }\n      }\n    }\n    fs.writeFile(outputFileName, outputText, function(err){\n      if (err) return;\n      // console.log(outputFileName +  '>' + outputText);\n    });\n  };\n  \nvar addFileName = function(dirname, name, indent){\n    var indent = indent + 4;\n    markdownText += '';\n    for(var i = 0; i < indent; i++){\n        // if(i % 3 === 0){\n        // markdownText += '|';\n        // } else {\n        markdownText += ' ';\n        // }\n    }\n    // before\n    // markdownText += '|-- ' + name + '\\n';\n    dirname = dirname.replace('/workspaces/dubuqingfeng', '.');\n    dirname = dirname.replace('./docs', '');\n    name = name.replace('.md', '');\n    markdownText += '+ [' + name + '](' + dirname + '/' + name  + ')' + '\\n';\n};\n\nvar addFolderName = function(name, index){\nif(folders[name] !== undefined){\n    if(folders[name].marked){\n    return;\n    }\n    var indent = (folders[name].depth - startDepth) * 4;\n    markdownText += '';\n    for(var i = 0; i < indent; i++){\n        markdownText += ' ';\n        // if(folders[name].folders.length > 0){\n        //   if(i % 3 === 0){\n        //     markdownText += '|';\n        //   } else {\n        //     markdownText += ' ';\n        //   }\n        // } else {\n        //   markdownText += ' ';\n        // }\n    }\n    if(index === 1){\n        console.log('adding root folder');\n        // before\n        // markdownText += '|-- ' + startFolder + '\\n';\n        markdownText += '+ ' + startFolder + '\\n';\n    } else {\n        // before\n        // markdownText += '|-- ' + folders[name].name + '\\n';\n        markdownText += '+ ' + folders[name].name + '\\n';\n    }\n    // console.log('Folders[name]:');\n    // console.log(folders[name]);\n    folders[name].files.forEach(function(f){\n        addFileName(name, f, indent);\n    });\n    folders[name].marked = true;\n    folders[name].folders.forEach(function(f){\n        var path = name + '/' + f;\n        addFolderName(path, 2);\n    });    \n}\n};\n\nvar generateMarkdown = function(){\n    addFolderName(key, 1);\n\n    addSiblingfolderConnections();\n\n    fs.writeFile(currentWorkingDirectory + '/' + outputFileName, markdownText, function(err){\n        if (err) return;\n        // console.log(outputFileName +  '>' + outputText);\n    });\n};\n\nString.prototype.replaceAt=function(index, character) {\n    return this.substring(0, index) + character + this.substring(index+character.length);\n}\n\nvar addSiblingfolderConnections = function(){ \n    var lines = markdownText.split('\\n');\n    for(var i=1; i<lines.length; i++){\n        var line1 = lines[i-1];\n        var line2 = lines[i];\n        for(var j=0; j<line2.length; j++){\n        var char1 = line1.charAt(j);\n        var char2 = line2.charAt(j);\n        // console.log('comparing ' + char1 + ' with ' + char2);\n        // Search for folder below to connect to\n        var foundSibling = false;\n        for(var k=i; k<lines.length; k++){\n            var charBelow = lines[k].charAt(j);\n            if(charBelow !== '|' && charBelow !== ' '){\n            break;\n            }\n            if(charBelow === '|'){\n            foundSibling = true;\n            }\n        }\n        if(foundSibling && char1 === '|' && char2 === ' '){\n            line2 = line2.replaceAt(j, '|');\n            lines[i] = line2;\n        }\n        }\n    }\n    console.log('lines');\n    console.log(lines);\n    markdownText = lines.join('\\n');\n};\n\n\n// start the mddir\nfolders[key] = {\n    depth: searchPath.split('/').length - 1,\n    parentFolder: null,\n    path: searchPath,\n    name: searchPath.split('/')[searchPath.split('/').length - 1],\n    folders: [],\n    files: [],\n    logged: false,\n    parsed: false,\n    marked: false\n};\nfs.readdir(searchPath, function(err, list){\n    list.forEach(function(item){\n        if(!fs.lstatSync(searchPath + '/' + item).isDirectory()){\n            if(folders[key].files.indexOf(item) === -1){\n                folders[key].files.push(item);\n            }\n        }\n    });\n    folders[key].parsed = true;\n});\ngetFolders(searchPath); \n")))}c.isMDXComponent=!0}}]);