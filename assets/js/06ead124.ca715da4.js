"use strict";(self.webpackChunkdubuqingfeng=self.webpackChunkdubuqingfeng||[]).push([[5804],{92239:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"life/devices/nas/docker/ttrss/ttrss","title":"ttrss","description":"ttrss","source":"@site/docs/life/devices/nas/docker/ttrss/ttrss.md","sourceDirName":"life/devices/nas/docker/ttrss","slug":"/life/devices/nas/docker/ttrss/","permalink":"/docs/life/devices/nas/docker/ttrss/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sunpanel","permalink":"/docs/life/devices/nas/docker/sunpanel/"},"next":{"title":"uptimekuma","permalink":"/docs/life/devices/nas/docker/uptimekuma/"}}');var r=t(74848),o=t(28453);const a={},i=void 0,c={},d=[{value:"ttrss",id:"ttrss",level:2}];function l(e){const n={code:"code",h2:"h2",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"ttrss",children:"ttrss"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'version: "3"\nservices:\n  service.rss:\n    image: 1nj0zren.mirror.aliyuncs.com/wangqiru/ttrss:latest\n    container_name: ttrss\n    ports:\n      - 181:80\n    environment:\n      - SELF_URL_PATH=http://192.168.1.201:181/ # please change to your own domain\n      - DB_PASS=ttrss # use the same password defined in `database.postgres`\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - feed-icons:/var/www/feed-icons/\n    networks:\n      - public_access\n      - service_only\n      - database_only\n    stdin_open: true\n    tty: true\n    restart: always\n\n  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page\n    image: wangqiru/mercury-parser-api:latest\n    container_name: mercury\n    networks:\n      - public_access\n      - service_only\n    restart: always\n\n  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page\n    image: wangqiru/opencc-api-server:latest\n    container_name: opencc\n    environment:\n      - NODE_ENV=production\n    networks:\n      - service_only\n    restart: always\n\n  database.postgres:\n    image: postgres:13-alpine\n    container_name: postgres\n    environment:\n      - POSTGRES_PASSWORD=ttrss # feel free to change the password\n    volumes:\n      - ./postgres-data/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host\n    networks:\n      - database_only\n    restart: always\n\n  # utility.watchtower:\n  #   container_name: watchtower\n  #   image: containrrr/watchtower:latest\n  #   volumes:\n  #     - /var/run/docker.sock:/var/run/docker.sock\n  #   environment:\n  #     - WATCHTOWER_CLEANUP=true\n  #     - WATCHTOWER_POLL_INTERVAL=86400\n  #   restart: always\n\nvolumes:\n  feed-icons:\n\nnetworks:\n  public_access: # Provide the access for ttrss UI\n  service_only: # Provide the communication network between services only\n    internal: true\n  database_only: # Provide the communication between ttrss and database only\n    internal: true\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);