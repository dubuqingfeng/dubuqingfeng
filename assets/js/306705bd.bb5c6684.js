"use strict";(self.webpackChunkdubuqingfeng=self.webpackChunkdubuqingfeng||[]).push([[3488],{69433:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>h,default:()=>_,frontMatter:()=>i,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"code/blockchain/healthcheck","title":"healthcheck","description":"healthcheck","source":"@site/docs/code/blockchain/healthcheck.md","sourceDirName":"code/blockchain","slug":"/code/blockchain/healthcheck","permalink":"/docs/code/blockchain/healthcheck","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"51attack","permalink":"/docs/code/blockchain/51attack"},"next":{"title":"rpc","permalink":"/docs/code/blockchain/rpc"}}');var o=t(74848),r=t(28453);const i={},h=void 0,s={},a=[{value:"healthcheck",id:"healthcheck",level:2},{value:"code",id:"code",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"healthcheck",children:"healthcheck"}),"\n",(0,o.jsx)(n.h3,{id:"code",children:"code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'#!/bin/bash\n# apk add curl jq\n\nCUR_NODE_NAME="test-eth"\nCUR_NODE_RPC_URL="http://localhost:8545"\nLARK_WEBHOOK_URL=""\nPUBLIC_NODES="https://eth-mainnet.public.blastapi.io"\nTHRESHOLD=0\n\n# restart\nRESTART_THRESHOLD=10\n\nfunction parse_json(){\n     echo "${1//\\"/}"|sed "s/.*$2:\\([^,}]*\\).*/\\1/"\n}\n\ncur_node_block_height_result=$(curl -s -X POST $CUR_NODE_RPC_URL --header \'Content-Type: application/json\' \\\n    --data-raw \'{"jsonrpc":"2.0","method":"eth_blockNumber","params":[], "id": 1}\')\ncur_node_hex_height=$(parse_json $cur_node_block_height_result "result")\ncur_node_dec_height=$(echo -n $cur_node_hex_height | xargs printf "%d")\necho "-- $CUR_NODE_RPC_URL -- " $cur_node_dec_height\n\n# \u8282\u70b9 peer \u76d1\u63a7\ncur_node_peer_result=`curl -H "Content-Type: application/json" --data \'{"jsonrpc":"2.0","method":"net_peerCount","id":64}\' $CUR_NODE_RPC_URL 2>/dev/null`\npeers_count=$(parse_json $cur_node_peer_result "result")\necho "Number of Node Connections: $((16#${peers_count:2}))"\nif [[ `printf "%d" $peers_count` == "0" || `printf "%d" $peers_count` == "1" ]]; then\n\tpeer_message="The node $CUR_NODE_NAME peer is low."\n\tcurl -X POST -H "Content-Type: application/json" -d \'{"msg_type":"text","content":{"text":"\'"${peer_message}"\'"}}\' $LARK_WEBHOOK_URL\n\texit 1;\nfi\n\nneed_exit=false\nfor value in $PUBLIC_NODES\ndo\n    cur_hex_height=$(curl -s -X POST $value --header \'Content-Type: application/json\' \\\n    --data-raw \'{"jsonrpc":"2.0","method":"eth_blockNumber","params":[], "id": 1}\' | jq -r .result)\n\tcur_dec_height=$(echo -n $cur_hex_height | xargs printf "%d")\n\tdiff="$(($cur_dec_height-$cur_node_dec_height))"\n\techo "-- $value -- " $cur_dec_height "diff:" $diff\n\tif [ "$diff" -gt "$THRESHOLD" ]; then\n\t\tmessage="The node $CUR_NODE_NAME is not in sync, diff is $diff, now height is $cur_node_dec_height, $value, public node height is $cur_dec_height"\n\t\techo $message\n\t\tcurl -X POST -H "Content-Type: application/json" -d \'{"msg_type":"text","content":{"text":"\'"${message}"\'"}}\' $LARK_WEBHOOK_URL\n\tfi\n\tif [ "$diff" -gt "$RESTART_THRESHOLD" ]; then\n\t\tneed_exit=true\n\tfi\ndone\n\nif $need_exit; then\n\techo "needExit";\n\texit 1;\nfi\nexit 0;\n'})})]})}function _(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>h});var c=t(96540);const o={},r=c.createContext(o);function i(e){const n=c.useContext(r);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),c.createElement(r.Provider,{value:n},e.children)}}}]);